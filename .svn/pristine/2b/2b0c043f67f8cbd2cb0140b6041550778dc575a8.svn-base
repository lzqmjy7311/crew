package com.gbicc.person.monitor.getter;

import java.util.List;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.util.StringUtils;

import com.gbicc.bpm.SpringContextHolder;
import com.gbicc.person.monitor.entity.TPlTask;
import com.gbicc.person.monitor.service.TPlTaskService;
import com.gbicc.person.monitor.service.TaskType;
import com.huateng.common.err.Module;
import com.huateng.common.err.Rescode;
import com.huateng.commquery.result.Result;
import com.huateng.commquery.result.ResultMng;
import com.huateng.ebank.business.common.GlobalInfo;
import com.huateng.ebank.business.common.PageQueryResult;
import com.huateng.ebank.entity.dao.mng.ROOTDAO;
import com.huateng.ebank.entity.dao.mng.ROOTDAOUtils;
import com.huateng.ebank.framework.web.commQuery.BaseGetter;
import com.huateng.exception.AppException;

/**
 * 工作台流程查询---查询关联历史
 * 菜单 调查任务
 * @date    2016年1月16日
 * @author  tangdu
 * @desc
 */
public class TPlTaskDeskGetter extends BaseGetter {
	@Override
	public Result call() throws AppException {
		try {
			PageQueryResult pageResult = getData();
			ResultMng.fillResultByList(getCommonQueryBean(),
					getCommQueryServletRequest(), pageResult.getQueryResult(),
					getResult());
			result.setContent(pageResult.getQueryResult());
			result.getPage().setTotalPage(
					pageResult.getPageCount(getResult().getPage()
							.getEveryPage()));
			result.init();
			return result;
		} catch (AppException appEx) {
			throw appEx;
		} catch (Exception ex) {
			throw new AppException(Module.SYSTEM_MODULE,
					Rescode.DEFAULT_RESCODE, ex.getMessage(), ex);
		}
	}
	
	protected PageQueryResult getData() throws Exception {
		String type = (String) getCommQueryServletRequest().getParameterMap().get("type");
		//是否是监控任务页面//
		String ismonitor = (String) getCommQueryServletRequest().getParameterMap().get("ismonitor");
		String warnLevel = (String) getCommQueryServletRequest().getParameterMap().get("warnLevel");
		String loanAcct = (String) getCommQueryServletRequest().getParameterMap().get("loanAcct");
		String custName = (String) getCommQueryServletRequest().getParameterMap().get("custName");
		String loanVariety = (String) getCommQueryServletRequest().getParameterMap().get("loanVariety");
		String loanTerm = (String) getCommQueryServletRequest().getParameterMap().get("loanTerm");
		String taskTypeStr= (String) getCommQueryServletRequest().getParameterMap().get("taskType");
		String rptStatus=(String) getCommQueryServletRequest().getParameterMap().get("rptStatus");
		String taskSourceType=(String) getCommQueryServletRequest().getParameterMap().get("taskSourceType");
		
		PageQueryResult pageQueryResult = new PageQueryResult();
		GlobalInfo info=GlobalInfo.getCurrentInstance();
		String userId=info.getTlrno();
		String roleId=info.getWorkflowRoleId();
		TPlTaskService tPlTaskService=TPlTaskService.getInstance();
		int pageSize = getResult().getPage().getEveryPage();
		int pageIndex = getResult().getPage().getCurrentPage();
		String brcode= info.getBrcode();//TODO 机构
		JdbcTemplate jdbcTemplate=SpringContextHolder.getBean(JdbcTemplate.class);
		ROOTDAO rootdao = ROOTDAOUtils.getROOTDAO();
		StringBuilder wh=new StringBuilder();//task where 条件 
		TaskType taskType=TaskType.getTaskType(type);
		if(taskType==null){
			taskType=TaskType.TODOTASK;//默认取代办工作
		}
		if(StringUtils.hasText(ismonitor) && !StringUtils.hasText(warnLevel)){
			wh.append(" and t3.WARN_LEVEL = '").append(6).append("'");
		}
		if(StringUtils.hasText(warnLevel)){
			wh.append(" and t3.WARN_LEVEL = '").append(warnLevel).append("'");
		}
		if(StringUtils.hasText(loanAcct)){
			wh.append(" and t3.LOAN_ACCT like '").append(loanAcct).append("%'");
		}
		if(StringUtils.hasText(custName)){
			wh.append(" and t3.CUST_NAME like '").append(custName).append("%'");
		}
		if(StringUtils.hasText(loanVariety)){
			wh.append(" and t3.LOAN_VARIETY = '").append(loanVariety).append("'");
		}
		if(StringUtils.hasText(loanTerm)){
			wh.append(" and t3.LOAN_TERM = '").append(loanTerm).append("'");
		}
		if(StringUtils.hasText(taskTypeStr)){
			wh.append(" and t3.TASK_TYPE  = '").append(taskTypeStr).append("'");
		}
		if(StringUtils.hasText(taskSourceType)){
			wh.append(" and t3.TASK_SOURCE_TYPE  = '").append(taskSourceType).append("'");
		}
		if(StringUtils.hasText(rptStatus)){//TODO 
			wh.append(" and t3.RPT_STATUS = '").append(rptStatus).append("'");
		}
		
		if("7".equals(rptStatus)){//取所有任务完成的流程并显示
			StringBuilder sql0=new StringBuilder("select t3.*,t4.TLR_NAME HANDLERNAME,t3.HANDLER HANDLERNO,t5.BRCODE HANDLERORGNO,t5.BRNAME HANDLERORGNAME from T_PL_TASK  t3 ");
			sql0.append(" join TLR_INFO t4 on t3.HANDLER=t4.TLRNO ");
			sql0.append(" join BCTL t5 on t5.BRCODE=t4.BRCODE ");
			sql0.append(" where 1=1 ");
			sql0.append(wh);
			StringBuffer sqlp=new StringBuffer("select t0.* from ( ");
			sqlp.append("select t.*,row_number() over(order by TASK_CREAT_DATE  desc,TASK_TYPE desc) as rnum from ( ");
			sqlp.append(sql0);
			sqlp.append(") t ) t0 where t0.rnum>"+(pageIndex-1)*pageSize+" ");
			sqlp.append("fetch first "+pageSize+" rows only ");
			List<TPlTask> tasks=jdbcTemplate.query(sqlp.toString(), 
					BeanPropertyRowMapper.newInstance(TPlTask.class));
			
			StringBuilder sqll=new StringBuilder("select count(1) from T_PL_TASK t3 where 1=1 ");
			sqll.append(wh);
			Integer totalCount=(Integer)rootdao.querySqlOne(sqll.toString());
			pageQueryResult.setQueryResult(tasks);
			pageQueryResult.setTotalCount(totalCount);
		}else{
			StringBuffer sql=tPlTaskService.getQueryStr(userId, roleId);
			sql.append(wh);
			//构造分页
			StringBuffer sqlp=new StringBuffer("select t0.* from ( ");
			sqlp.append("select t.*,row_number() over(order by CREATE_TIME_ desc,TASK_TYPE desc) as rnum from ( ");
			sqlp.append(sql);
			sqlp.append(tPlTaskService.getQueryStr(taskType));
			sqlp.append(") t ) t0 where t0.rnum>"+(pageIndex-1)*pageSize+" ");
			sqlp.append("fetch first "+pageSize+" rows only ");
			
			List<TPlTask> tasks=jdbcTemplate.query(sqlp.toString(), 
					BeanPropertyRowMapper.newInstance(TPlTask.class));
			//构造数据量
			StringBuffer sqll=new StringBuffer("select count(1) from ( ");
			sqll.append(sql);
			sqll.append(tPlTaskService.getQueryStr(taskType));
			sqll.append(" )");
			//set
			Integer totalCount=(Integer)rootdao.querySqlOne(sqll.toString());
			pageQueryResult.setQueryResult(tasks);
			pageQueryResult.setTotalCount(totalCount);
		}
		return pageQueryResult;
	}
}
