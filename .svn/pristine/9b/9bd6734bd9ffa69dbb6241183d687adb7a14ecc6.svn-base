package com.gbicc.bpm.operation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;

import com.gbicc.bpm.entity.TTaskDivertDtl;
import com.gbicc.bpm.service.ProcessManagerService;
import com.gbicc.common.FileUpDownProperties;
import com.huateng.ebank.entity.dao.mng.ROOTDAO;
import com.huateng.ebank.entity.dao.mng.ROOTDAOUtils;
import com.huateng.ebank.framework.exceptions.CommonException;
import com.huateng.ebank.framework.operation.BaseOperation;
import com.huateng.ebank.framework.operation.OperationContext;


/**
 * @author likm
 * @time   2015年11月20日09:44:16
 * @desc   任务重分配操作类
 */
public class TaskAfreshAssignOperation extends BaseOperation {
	
	public static final String ID = "TaskAfreshAssignOperation";
	public static final String CMD = "CMD";
	public static final String CMD_QUERY = "CMD_QUERY";
	public static final String CMD_INSERT = "CMD_INSERT";
	public static final String CMD_UPDATE = "CMD_UPDATE";
	public static final String CMD_DELETE = "CMD_DELETE";
	public static final String IN_PARAM = "IN_PARAM";
	
	//定期流程关键字
	public static final String PROCESS_KEY_DQ="regular_monitor_process";
	//预警处置流程关键字
	public static final String PROCESS_KEY_YJ="yj_monitor_process";
	//用途监控流程关键字
	public static final String PROCESS_KEY_YT="yt_monitor_process";
	//中小融辅流程关键字
	public static final String PROCESS_KEY_ZXRF="zxrf_process";
	
	@Override
	public void afterProc(OperationContext context) throws CommonException {
	}

	@Override
	public void beforeProc(OperationContext context) throws CommonException {
	}

	@SuppressWarnings("unchecked")
	@Override
	public void execute(OperationContext context) throws CommonException {
		ProcessManagerService service=ProcessManagerService.getInstace();
		String assignee =(String) context.getAttribute("assignee");;
		String assigneeOrg =(String) context.getAttribute("assigneeOrg");;
		List<TTaskDivertDtl> list=(List<TTaskDivertDtl>)context.getAttribute("list");
		ROOTDAO rootdao=ROOTDAOUtils.getROOTDAO();
		//String op=(String) context.getAttribute("op");
		Map<String,String> map=new HashMap<String, String>();
		map.put(FileUpDownProperties.readValue(PROCESS_KEY_DQ),FileUpDownProperties.readValue(PROCESS_KEY_DQ));
		map.put(FileUpDownProperties.readValue(PROCESS_KEY_YJ),FileUpDownProperties.readValue(PROCESS_KEY_YJ));
		map.put(FileUpDownProperties.readValue(PROCESS_KEY_YT),FileUpDownProperties.readValue(PROCESS_KEY_YT));
		map.put(FileUpDownProperties.readValue(PROCESS_KEY_ZXRF),FileUpDownProperties.readValue(PROCESS_KEY_ZXRF));
		for(TTaskDivertDtl divert:list){
			Task task=service.getTaskService().createTaskQuery().taskId(divert.getTaskId()).singleResult();
			task.setAssignee(assignee);
			service.getTaskService().saveTask(task);
			if("CM_CustWranDisposalProcess".equals(divert.getProcKey())){
				if(divert.getProcInstId()!=null){
					String esql="UPDATE T_CM_WARN_CUSTOMER T SET T.FD_OPER_BANK='"+assigneeOrg+"',T.FD_OPERATOR='"+assignee+"' WHERE T.FD_ID IN " 
						+" ("
						+" SELECT T1.FD_CUSTOMER_ID FROM T_CM_WARN_TASK T1 INNER JOIN ACT_RU_EXECUTION T2 ON T1.FD_ID=T2.BUSINESS_KEY_ WHERE T2.PROC_INST_ID_='"+divert.getProcInstId()+"'"
						+") ";
					rootdao.executeSql(esql);
					rootdao.flush();
				}
			}else if("PL_CollectionMngProcess".equals(divert.getProcKey())){
				String esql="UPDATE T_PL_COLLECTION_INFO T SET T.FD_OPERATOR='"+assignee+"',T.FD_OPER_BANK='"+assigneeOrg+"',T.FD_COLLE_PERSON_CODE='"+assignee+"' WHERE T.FD_ID IN " 
						+" ("
						+" SELECT T2.BUSINESS_KEY_ FROM ACT_RU_EXECUTION T2 WHERE T2.PROC_INST_ID_='"+divert.getProcInstId()+"'"
						+") ";
						rootdao.executeSql(esql);
						rootdao.flush();
			}else if(StringUtils.isNotEmpty(map.get(divert.getProcKey()))){
				divert.getProcInstId();
				String sql="update t_pl_task set bank_id='"+assigneeOrg+"',handler='"+assignee+"' where fd_id=(select business_key_ from act_ru_execution where proc_inst_id_='"+divert.getProcInstId()+"' and business_key_ is not null) ";
				rootdao.executeSql(sql);
				rootdao.flush();
			}
		}
	}
}
