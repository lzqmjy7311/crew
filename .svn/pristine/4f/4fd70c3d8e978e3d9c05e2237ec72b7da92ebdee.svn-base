package com.gbicc.company.warnDisposal.getter;

import java.util.Date;
import java.util.List;

import org.springframework.util.StringUtils;

import com.gbicc.company.warnDisposal.entity.TCmWarnTask;
import com.gbicc.util.DateUtils;
import com.huateng.common.err.Module;
import com.huateng.common.err.Rescode;
import com.huateng.commquery.result.Result;
import com.huateng.commquery.result.ResultMng;
import com.huateng.ebank.business.common.GlobalInfo;
import com.huateng.ebank.business.common.PageQueryResult;
import com.huateng.ebank.business.common.service.BctlService;
import com.huateng.ebank.entity.dao.mng.ROOTDAO;
import com.huateng.ebank.entity.dao.mng.ROOTDAOUtils;
import com.huateng.ebank.framework.web.commQuery.BaseGetter;
import com.huateng.exception.AppException;

public class TCmWarnTaskGetter extends BaseGetter {

	@Override
	public Result call() throws AppException {
		try {
			PageQueryResult pageResult = getData();
			ResultMng.fillResultByList(getCommonQueryBean(),
					getCommQueryServletRequest(), pageResult.getQueryResult(),
					getResult());
			result.setContent(pageResult.getQueryResult());
			result.getPage().setTotalPage(
					pageResult.getPageCount(getResult().getPage()
							.getEveryPage()));
			result.init();
			return result;
		} catch (AppException appEx) {
			throw appEx;
		} catch (Exception ex) {
			throw new AppException(Module.SYSTEM_MODULE,
					Rescode.DEFAULT_RESCODE, ex.getMessage(), ex);
		}
	}

	@SuppressWarnings("rawtypes")
	protected PageQueryResult getData() throws Exception {
		String id = (String) getCommQueryServletRequest().getParameterMap().get("id");
		String taskId = (String) getCommQueryServletRequest().getParameterMap().get("taskId");
		//String customerId = (String) getCommQueryServletRequest().getParameterMap().get("customerId");
		String status = (String) getCommQueryServletRequest().getParameterMap().get("status");
		String startType = (String) getCommQueryServletRequest().getParameterMap().get("startType");
		String selectType = (String) getCommQueryServletRequest().getParameterMap().get("selectType");
		String custcode = (String) getCommQueryServletRequest().getParameterMap().get("custcode");
		String custname = (String) getCommQueryServletRequest().getParameterMap().get("custname");
		String operator = (String) getCommQueryServletRequest().getParameterMap().get("operator");
		String taskCode = (String) getCommQueryServletRequest().getParameterMap().get("taskCode");
		String operBank = (String) getCommQueryServletRequest().getParameterMap().get("operBank");
		String taskType = (String) getCommQueryServletRequest().getParameterMap().get("taskType");
		String warnCode = (String) getCommQueryServletRequest().getParameterMap().get("warnCode");
		
		PageQueryResult pageQueryResult = new PageQueryResult();
		// 分页大小
		int pageSize = getResult().getPage().getEveryPage();
		// 页码
		int pageIndex = getResult().getPage().getCurrentPage();

		ROOTDAO rootdao = ROOTDAOUtils.getROOTDAO();
		
		GlobalInfo info=GlobalInfo.getCurrentInstance();
		String userId=info.getTlrno();
//		ProcessManagerService processManagerService=ProcessManagerService.getInstace();
//		String businessIds=processManagerService.findBusinessKey(userId);
		
		StringBuffer hql = new StringBuffer("select t from TCmWarnTask t,ActiveTask t2 where t.id=t2.businessKey ");
		if(StringUtils.hasText(info.getBrcode())){
			String orgs=BctlService.getInstance().findParentOrgIDsTree(info.getBrcode());
			if(orgs.length()>0){
				hql.append(" and t.tCmCustomer.operBank in ("+orgs+") ");
			}else{
				hql.append(" and 1=2 ");
			}
		}else{
			hql.append(" and 1=2 ");
		}
		if(StringUtils.hasText(id)){
			hql.append(" and t.id = '"+id+"'");
		}else if(StringUtils.hasText(taskId)){
			hql.append(" and t.id = '"+taskId+"'");
		}else{
			if("TCmWarnTaskReport".equals(selectType)){
				hql = new StringBuffer("select t from TCmWarnTask t where 1=1 ");
				//查询可发起处置报告流程任务时，与状态为完成或者待发起处置报告流程的任务才可查询发起 未解除     //风险未全部排除
				hql.append(" and t.overRc='0' and (t.status='6' or t.status='9')    ");
				hql.append(" and exists (from TCmWarnTaskRel tr where t.id=tr.taskId and tr.warnElimIs<>'1' ) ");
				hql.append(" and t.disposalPer='"+userId+"' ");
			}else if("selectAll".equals(selectType)){
				//查询
			}else{
				if(!"admin".equals(userId)){
					hql.append(" and t2.assignee= '"+userId+"'");
				}
			}
		}
		if(StringUtils.hasText(status)){
			hql.append(" and t.status = '"+status+"'");
		}
		if(StringUtils.hasText(startType)){
			hql.append(" and t.startType = '"+startType+"'");
		}
		if(StringUtils.hasText(custcode)){
			hql.append(" and t.tCmCustomer.custcode like '%"+custcode+"%'");
		}
		if(StringUtils.hasText(taskCode)){
			hql.append(" and t.taskCode like '%"+taskCode+"%'");
		}
		if(StringUtils.hasText(custname)){
			hql.append(" and t.tCmCustomer.custname like '%"+custname+"%'");
		}
		if(StringUtils.hasText(operator)){
			hql.append(" and t.tCmCustomer.operator = '"+operator+"'");
		}
		if(StringUtils.hasText(operBank)){
			hql.append(" and t.tCmCustomer.operBank = '"+operBank+"'");
		}
		if(StringUtils.hasText(taskType)){//超时任务
			hql.append(" and to_char(t.taskMatureDate,'yyyymmdd') < '"
					+DateUtils.formatYmdDate(new Date())+"'");
		}
		if(StringUtils.hasText(warnCode)){
			hql.append(" and exists (select 1 from TCmWarnTaskRel tr"
					+ "	 where t.id=tr.taskId and tr.warnCode like '%"+warnCode+"%' ) ");
		}
		hql.append(" order by t.updateTime desc ");
		
		pageQueryResult = rootdao.pageQueryByHql(pageIndex, pageSize,
				hql.toString());
		
//		if(StringUtils.hasText(customerId)){
			List list=pageQueryResult.getQueryResult();
			for (int i = 0; i < list.size(); i++) {
				TCmWarnTask tCmWarnTask=(TCmWarnTask)list.get(i);
				if(!StringUtils.hasText(tCmWarnTask.getInspectors())){
					tCmWarnTask.setInspectors(userId);
				}
				if(tCmWarnTask.getInspeCitDate()==null){
					tCmWarnTask.setInspeCitDate(new Date());
				}
				if(tCmWarnTask.gettCmCustomer()!=null){
					tCmWarnTask.setWarnLevel(tCmWarnTask.gettCmCustomer().getCustWarnLevel());
				}
				if("5".equals(tCmWarnTask.getStatus())){//待填报告状态时 客户经理点击 12593
					if(tCmWarnTask.getDisposalPer()==null){
						tCmWarnTask.setDisposalPer(userId);
					}
					if(tCmWarnTask.getDispoCitDate()==null){
						tCmWarnTask.setDispoCitDate(new Date());
					}
				}
			}
			
//		}
			pageQueryResult.setQueryResult(list);
		return pageQueryResult;
	}
}
