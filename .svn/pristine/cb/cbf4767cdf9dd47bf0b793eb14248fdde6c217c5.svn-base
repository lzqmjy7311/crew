package com.gbicc.person.collection.service;


import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gbicc.bpm.entity.TLoanAccountRelDuty;
import com.gbicc.bpm.service.ProcessManagerService;
import com.gbicc.common.CommonService;
import com.gbicc.common.FileUpDownProperties;
import com.gbicc.company.warnDisposal.service.TCmWarnTaskService;
import com.gbicc.person.collection.dao.TCollectionInfoDAO;
import com.gbicc.person.collection.entity.TCollectionInfo;
import com.gbicc.person.product.entity.Product;
import com.gbicc.personCommon.entity.TEdwPlsAccount;
import com.gbicc.personCommon.entity.TEdwPlsCust;
import com.huateng.ebank.business.management.service.TlrInfoService;
import com.huateng.ebank.entity.data.mng.TlrInfo;
import com.huateng.ebank.framework.exceptions.CommonException;
import com.huateng.ebank.framework.util.ApplicationContextUtils;

/**
 * 
 * @author liufei
 *
 * 版本：2015年11月07日 上午17:31:41
 * 类说明：催收管理 service
 */
public class TCollectionInfoService {
	
	private static final Logger log=LoggerFactory.getLogger(TCollectionInfoService.class);
	protected TCollectionInfoService() {
	}

	public synchronized static TCollectionInfoService getInstance() {
		return (TCollectionInfoService) ApplicationContextUtils
				.getBean(TCollectionInfoService.class.getSimpleName());
	}
	
	private TCollectionInfoDAO getDao(){
		return (TCollectionInfoDAO) ApplicationContextUtils.getBean("TCollectionInfoDAO");
	}
	
	public TCollectionInfo get(String id) throws CommonException{
		TCollectionInfoDAO dao=getDao();
		return dao.query(id);
	}
	
	public void save(TCollectionInfo tCollectionInfo) throws CommonException{
		TCollectionInfoDAO dao=getDao();
		dao.insert(tCollectionInfo);
	}
	
	public void update(TCollectionInfo tCollectionInfo) throws CommonException{
		TCollectionInfoDAO dao=getDao();
		dao.update(tCollectionInfo);
	}
	
	public void delete(String id) throws CommonException{
		TCollectionInfoDAO dao=getDao();
		dao.delete(id);
	}
	
	
	/**
	 * 跑批，启动流程接口
	 * @param domain
	 */
	public void startProcess(TCollectionInfo domain){
		try {
			this.setDomainParam(domain);
			//流程启动
			ProcessManagerService pms=ProcessManagerService.getInstace();
			if("false".equals(pms.findRuningTaskByBusinessKey(domain.getId()))){
				Map<String, Object> map=new HashMap<String, Object>();
				if(StringUtils.isNotBlank(domain.getPostLoanPer())){
					TlrInfoService tlrinfoservice=TlrInfoService.getInstance();
					if(tlrinfoservice.getTlrInfoByTlrno(domain.getPostLoanPer())==null){
						map.put("assignee", TCmWarnTaskService.getInstance().getDateDicName(FileUpDownProperties.readValue("task_distribute_mng_type")));
						pms.startProcess(domain.getId(),"PL_CollectionMngProcess","admin",map);
					}else{
						map.put("assignee", domain.getPostLoanPer());
						pms.startProcess(domain.getId(),"PL_CollectionMngProcess","admin",map);
					}
				}
			}
		} catch (Exception e) {
			log.error("催收启动流程方法异常---------", e);
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	
	/**
	 * 赋值
	 * @param domain
	 * @throws CommonException 
	 */
	private void setDomainParam(TCollectionInfo domain) throws CommonException{
		CommonService comService =  CommonService.getInstance();
		//账户信息表
		TEdwPlsAccount accountEntity=(TEdwPlsAccount)comService.queryOneHQL("from TEdwPlsAccount where loanacno='"+domain.getLoanAccount()+"'");
		//责任人表
		TLoanAccountRelDuty tLoanAccountRelDuty=(TLoanAccountRelDuty)comService.queryOneHQL("from TLoanAccountRelDuty where loanacno='"+domain.getLoanAccount()+"'");
		
		
		
		domain.setEarliestOverDate(domain.getLimitStartDate());
		//连续拖欠期数
		if(accountEntity!=null){
			
			if(accountEntity.getProdid()!=null){
				List<Product> list=(List<Product>)comService.queryListHQL("from Product where prodCode='"+accountEntity.getProdid()+"'");
				if(list.size()>0){
					domain.setProductCode(accountEntity.getProdid());
					domain.setProductType(list.get(0).getProdType());
				}
			}
			
			domain.setGuarWay(accountEntity.getAssukind());
			domain.setProvideDate(accountEntity.getBegindate());
			domain.setMatureDate(accountEntity.getEnddate());
			domain.setOperator(accountEntity.getDutyid2());
			domain.setOperBank(accountEntity.getBankid());
			domain.setCollePersonCode(accountEntity.getDutyid2());
			domain.setAcctStatus(accountEntity.getAcflag());
			TlrInfo collePerson= TlrInfoService.getInstance().getTlrInfoByTlrno(accountEntity.getDutyid2());
			if(collePerson!=null){
				domain.setCollePersonName(collePerson.getTlrName());
			}
			domain.setPostLoanPer(accountEntity.getOperid());
			domain.setLoanAmt(accountEntity.getTcapi().doubleValue());
			domain.setArrearCount(accountEntity.getOverCount());
			TEdwPlsCust custEntity=(TEdwPlsCust)comService.queryOneHQL("from TEdwPlsCust where custid='"+accountEntity.getCustid()+"'");
			if(custEntity!=null){
				domain.setCustCode(custEntity.getCustid());
				domain.setCustName(custEntity.getCustname());
				domain.setTel(custEntity.getMobilecall());
			}
			domain.setLoanBalance(accountEntity.getBal().doubleValue());
			domain.setArrearAmt(accountEntity.getOverbal().doubleValue());
			domain.setArrearInterests(accountEntity.getOverinte().doubleValue());
		}
		if(tLoanAccountRelDuty!=null){
			if(tLoanAccountRelDuty.getCollid()!=null){
				domain.setOperator(tLoanAccountRelDuty.getCollid());
				domain.setPostLoanPer(tLoanAccountRelDuty.getCollid());
				TlrInfo handler= TlrInfoService.getInstance().getTlrInfoByTlrno(tLoanAccountRelDuty.getDutyid());
				if(handler!=null){
					domain.setOperBank(handler.getBrcode());
				}
				
			}
			TlrInfo collePerson= TlrInfoService.getInstance().getTlrInfoByTlrno(tLoanAccountRelDuty.getDutyid());
			if(collePerson!=null){
				domain.setCollePersonName(collePerson.getTlrName());
			}
		}
		domain.setCredited(new Date());
		domain.setUpdated(new Date());
		domain.setStatus("0");
		if(domain.getTaskCount()==null||domain.getTaskCount()==0){
			domain.setTaskCount(1);
		}else{
			domain.setTaskCount(domain.getTaskCount()+1);
		}
		this.calculteColletionType(domain);
		this.save(domain);
		
	}
	
	/**
	 * 计算催收方式
	 * @param info
	 */
	private void calculteColletionType(TCollectionInfo info){
		if("01".equals(info.getProductType()) || "07".equals(info.getProductType())){
			//个人按揭类贷款 个人经营用房按揭贷款
			if(info.getAccountLength()<=6){
				if("中".equals(info.getCollectionRank())){
					info.setCollectionType("4");
				}else{
					info.setCollectionType("1");
				}
			}else{
				if(StringUtils.isBlank(info.getCollectionRank()) || "null".equals(info.getCollectionRank()) || "无".equals(info.getCollectionRank())){
					info.setCollectionType("1");
				}else if("低".equals(info.getCollectionRank())){
					info.setCollectionType("1");
				}else if("中".equals(info.getCollectionRank())){
					info.setCollectionType("4");
				}else if("高".equals(info.getCollectionRank())){
					info.setCollectionType("6");
				}else{
					info.setCollectionType("1");
				}
			}
		}else{
			//02个人消费类贷款 //03个人经营类贷款
			if(StringUtils.isBlank(info.getCollectionRank()) || "null".equals(info.getCollectionRank()) || "无".equals(info.getCollectionRank())){
				info.setCollectionType("1");
			}else if("低".equals(info.getCollectionRank())){
				info.setCollectionType("1");
			}else if("较低".equals(info.getCollectionRank())){
				info.setCollectionType("4");
			}else if("中".equals(info.getCollectionRank())){
				info.setCollectionType("6");
			}else if("高".equals(info.getCollectionRank())){			
				info.setCollectionType("6");
			}else if("极高".equals(info.getCollectionRank())){
				info.setCollectionType("3");
			}else{
				info.setCollectionType("1");
			}
		}
		
		
	}
	
	
}
