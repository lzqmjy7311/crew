package com.gbicc.bpm.service;

import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.gbicc.bpm.entity.TLoanAccountDutyDistribute;
import com.gbicc.bpm.entity.TLoanAccountRelDuty;
import com.gbicc.bpm.getter.SubAutoUserAndOrgGetter;
import com.gbicc.bpm.operation.TLoanAccountDutyDistributeOperation;
import com.gbicc.common.FileUpDownProperties;
import com.gbicc.personCommon.entity.TEdwPlsAccount;
import com.huateng.ebank.business.management.service.TlrInfoService;
import com.huateng.ebank.entity.dao.mng.ROOTDAO;
import com.huateng.ebank.entity.dao.mng.ROOTDAOUtils;
import com.huateng.ebank.entity.data.mng.TlrInfo;
import com.huateng.ebank.framework.exceptions.CommonException;
import com.huateng.ebank.framework.util.ApplicationContextUtils;

public class TLoanAccountDutyDistributeService {
	public TLoanAccountDutyDistributeService() {
	}

	public synchronized static TLoanAccountDutyDistributeService getInstance() {
		return (TLoanAccountDutyDistributeService) ApplicationContextUtils
				.getBean(TLoanAccountDutyDistributeService.class.getSimpleName());
	}
	
	public ROOTDAO dao(){
		return  ROOTDAOUtils.getROOTDAO();
	}
	
	public TLoanAccountDutyDistribute get(String id) throws CommonException{
		return dao().query(TLoanAccountDutyDistribute.class, id);
	}
	
	public void save(TLoanAccountDutyDistribute tloanaccountdutydistribute) throws CommonException{
		dao().save(tloanaccountdutydistribute);
	}
	
	public void update(TLoanAccountDutyDistribute tloanaccountdutydistribute) throws CommonException{
		dao().update(tloanaccountdutydistribute);
	}
	
	public void delete(String id) throws CommonException{
		dao().delete(id);
	}
	
	/**
	 * 查找运行中流程是否有分派任务
	 * @param businessId
	 * @return
	 * @throws CommonException 
	 */
	@SuppressWarnings("rawtypes")
	public String dwrFindDistributeRuningProcess(String loanacno) throws CommonException{
		List list=TLoanAccountDutyDistributeService.getInstance().dao().queryByCondition("from TLoanAccountDutyDistribute where (loanacno='"+loanacno+"' or id in (select distId from TLoanAccountRelDistribute where loanacno='"+loanacno+"')) and status!='"+TLoanAccountDutyDistributeOperation.STATUS_APL_PASS+"' ");
		String bool="false";
		if(null!=list && list.size()>0){
			TLoanAccountDutyDistribute distribute=(TLoanAccountDutyDistribute) list.get(0);
			bool=ProcessManagerService.getInstace().findRuningTaskByBusinessKey(distribute.getId());
		}
		return bool;
	}
	
	/**
	 * 查找分派前检查人
	 * @param loanacnos
	 * @return
	 * @throws CommonException
	 */
	@SuppressWarnings("rawtypes")
	public String dwrFindOldCheckUser(String loanacnos,String type) throws CommonException{
		StringBuffer oldCheckUserBuf = new StringBuffer();
		if(StringUtils.isNotEmpty(loanacnos)){
			String[] arrs=loanacnos.split(",");
			String str="";
			for(int i=0;i<arrs.length;i++){
				str=str+"'"+arrs[i]+"',";
			}
			if(StringUtils.isNotEmpty(str)){
				str=str.substring(0,str.length()-1);
			}
			ROOTDAO rootdao = ROOTDAOUtils.getROOTDAO();
			StringBuffer hql = new StringBuffer("from TLoanAccountRelDuty t where loanacno in ("+str+") ");
			List list=rootdao.queryByCondition(hql.toString());
			if(null!=list && list.size()>0){
				for(int i=0;i<list.size();i++){
					TLoanAccountRelDuty relDuty=(TLoanAccountRelDuty) list.get(i);
					TlrInfo tlrInfo=null;
					String actHql="from TEdwPlsAccount where loanacno='"+relDuty.getLoanacno()+"' ";
					if(type.equals(TLoanAccountDutyDistributeOperation.DIST_TYPE_DUTY)){
						if(StringUtils.isNotEmpty(relDuty.getDutyid())){
							tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(relDuty.getDutyid());
						}else{
							List acts=rootdao.queryByCondition(actHql);
							TEdwPlsAccount act=(TEdwPlsAccount) acts.get(0);
							tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(act.getDutyid());
						}
					}else if(type.equals(TLoanAccountDutyDistributeOperation.DIST_TYPE_COLL)){
						if(StringUtils.isNotEmpty(relDuty.getCollid())){
							tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(relDuty.getCollid());
						}else{
							List acts=rootdao.queryByCondition(actHql);
							TEdwPlsAccount act=(TEdwPlsAccount) acts.get(0);
							tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(act.getDutyid2());
						}
					}
					String desc=tlrInfo.getBrcode()+","+tlrInfo.getTlrName()+","+tlrInfo.getTlrno();
					oldCheckUserBuf.append(tlrInfo.getTlrno()+"="+desc+";");
				}
			}else{
				String actHql="from TEdwPlsAccount t where loanacno in ("+str+") ";
				list=rootdao.queryByCondition(actHql);
				for(int i=0;i<list.size();i++){
					TEdwPlsAccount account=(TEdwPlsAccount) list.get(i);
					TlrInfo tlrInfo=null;
					if(type.equals(TLoanAccountDutyDistributeOperation.DIST_TYPE_DUTY)){
						tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(account.getDutyid());
					}else if(type.equals(TLoanAccountDutyDistributeOperation.DIST_TYPE_COLL)){
						tlrInfo=TlrInfoService.getInstance().getTlrInfoByTlrno(account.getDutyid2());
					}
					String desc=tlrInfo.getBrcode()+","+tlrInfo.getTlrName()+","+tlrInfo.getTlrno();
					oldCheckUserBuf.append(tlrInfo.getTlrno()+"="+desc+";");
				}
			}
		}
		return oldCheckUserBuf.toString();
	}
	
	/**
	 * 根据机构ID查找所有客户经理
	 * @param orgId
	 * @return
	 * @throws CommonException 
	 */
	@SuppressWarnings("rawtypes")
	public String dwrFindLeftCheckUser(String orgId,String checkUserIds) throws CommonException{
		StringBuffer leftCheckUserBuf = new StringBuffer();
		String roleId=FileUpDownProperties.readValue(SubAutoUserAndOrgGetter.SUBBRANCH_MNG);
		StringBuffer hql = new StringBuffer("from TlrInfo t where t.brcode='"+orgId+"' and t.tlrno in (select tlrno from TlrRoleRel where roleId='"+roleId+"') ");
		if(StringUtils.isNotEmpty(checkUserIds)){
			String userStr="";
			if(checkUserIds.indexOf(",")>-1){
				String[] users=checkUserIds.split(",");
				for(String user:users){
					userStr=userStr+"'"+user+"',";
				}
				userStr=userStr.substring(0,userStr.length()-1);
			}else{
				userStr="'"+checkUserIds+"'";
			}
			hql.append(" and t.tlrno not in ("+userStr+") ");
		}
		ROOTDAO rootdao = ROOTDAOUtils.getROOTDAO();
		List list=rootdao.queryByCondition(hql.toString());
		for(int i=0;i<list.size();i++){
			TlrInfo tlrInfo=(TlrInfo) list.get(i);
			String desc=tlrInfo.getBrcode()+","+tlrInfo.getTlrName()+","+tlrInfo.getTlrno();
			leftCheckUserBuf.append(tlrInfo.getTlrno()+"="+desc+";");
		}
		return leftCheckUserBuf.toString();
	}
}
