package com.gbicc.company.view.accountpage.getter;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;

import org.springframework.util.StringUtils;

import com.huateng.common.err.Module;
import com.huateng.common.err.Rescode;
import com.huateng.commquery.result.Result;
import com.huateng.commquery.result.ResultMng;
import com.huateng.ebank.business.common.GlobalInfo;
import com.huateng.ebank.business.common.PageQueryResult;
import com.huateng.ebank.entity.dao.mng.ROOTDAO;
import com.huateng.ebank.entity.dao.mng.ROOTDAOUtils;
import com.huateng.ebank.framework.web.commQuery.BaseGetter;
import com.huateng.exception.AppException;

@SuppressWarnings("unchecked")
public class ZtxMmfxyGetter extends BaseGetter {

	@Override
	public Result call() throws AppException {
		try {
			PageQueryResult pageResult = getData();
			ResultMng.fillResultByList(getCommonQueryBean(),
					getCommQueryServletRequest(), pageResult.getQueryResult(),
					getResult());
			result.setContent(pageResult.getQueryResult());
			result.getPage().setTotalPage(
					pageResult.getPageCount(getResult().getPage()
							.getEveryPage()));
			result.init();
			return result;
		} catch (AppException appEx) {
			throw appEx;
		} catch (Exception ex) {
			throw new AppException(Module.SYSTEM_MODULE,
					Rescode.DEFAULT_RESCODE, ex.getMessage(), ex);
		}
	}

	protected PageQueryResult getData() throws Exception {
		String txnTm = (String) getCommQueryServletRequest().getParameterMap().get("txnTm");
		String acctId = (String) getCommQueryServletRequest().getParameterMap().get("acctId");
		String endbussdate = (String) getCommQueryServletRequest().getParameterMap().get("endbussdate");
		PageQueryResult pageQueryResult = new PageQueryResult();
		// 分页大小
		int pageSize = getResult().getPage().getEveryPage();
		// 页码
		int pageIndex = getResult().getPage().getCurrentPage();

		ROOTDAO rootdao = ROOTDAOUtils.getROOTDAO();
		
		GlobalInfo info=GlobalInfo.getCurrentInstance();          //GlobalInfo  用户类
		String userId=info.getTlrno();
		
		StringBuffer hq2 = new StringBuffer("select  ROLE_ID from TLR_ROLE_REL  t where 1=1 ");
		hq2.append(" and t.TLRNO = '"+userId+"'");
		Integer roleId=0;

		Iterator it =rootdao.queryBySQL(hq2.toString());
		Date dateflag=new Date();
		
		//获得岗位代码
		while(it.hasNext()){
			roleId=(Integer)it.next();
		}
		//根据岗位代码进行查询日期限制--start
		if(roleId==222)
		{
			Calendar calendar=Calendar.getInstance();
			
			calendar.setTime(dateflag);
			calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH)-1);
			dateflag=calendar.getTime();
			
		}
		else 
		{
			Calendar calendar=Calendar.getInstance();
			calendar.setTime(dateflag);
			calendar.add(Calendar.MONTH, -3);
			dateflag=calendar.getTime();
		}	
		//根据岗位代码进行查询日期限制--end
		StringBuffer hql = new StringBuffer("from TOdsEdwDepositAcctTxnDtlInfo t where 1=1 ");
		
		boolean flag=false;										//是否空查询标记：未传入账户BankAccount，返回空集
		
		if(StringUtils.hasText(endbussdate)){
			hql.append(" and txnTm <= to_date('"+endbussdate+"','yyyy-MM-dd')");
		
		}
		if(StringUtils.hasText(txnTm)){
			DateFormat df=new SimpleDateFormat("yyyyMMdd");
			Date dat1=df.parse(txnTm);
			if(dat1.getTime()<dateflag.getTime())
				txnTm=df.format(dateflag);
			hql.append(" and txnTm >= to_date('"+txnTm+"','yyyy-MM-dd')");
			
		}else{
			DateFormat df=new SimpleDateFormat("yyyyMMdd");
			String strtemp=df.format(dateflag);
			hql.append(" and txnTm >= to_date('"+strtemp+"','yyyy-MM-dd')");
		}
		if(StringUtils.hasText(acctId)){
			hql.append(" and acctId = '"+acctId+"'");
			flag=true;
		}else{
				flag=false;
			 }
		
		if(flag==false){
			hql=new StringBuffer("from TOdsEdwDepositAcctTxnDtlInfo t where 0=1 ");
		}
		pageQueryResult = rootdao.pageQueryByHql(pageIndex, pageSize,hql.toString());
		return pageQueryResult;
	}
}
