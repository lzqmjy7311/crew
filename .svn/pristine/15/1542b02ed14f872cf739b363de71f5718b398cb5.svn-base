package com.gbicc.company.view.accountpage.getter;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.gbicc.company.view.accountpage.entity.TbCsmAccountsRelation;
import com.huateng.commquery.result.Result;
import com.huateng.commquery.result.ResultMng;
import com.huateng.ebank.business.common.BaseDAOUtils;
import com.huateng.ebank.business.common.bean.TreeNode;
import com.huateng.ebank.framework.web.commQuery.BaseGetter;
import com.huateng.exception.AppException;

@SuppressWarnings("unchecked")
public class AccountlistTreeGetter extends BaseGetter {
	@Override
	public Result call() throws AppException {
		List<TreeNode> list = new ArrayList<TreeNode>();

		StringBuffer hql = new StringBuffer();
		hql.append(" from TbCsmAccountsRelation po where 1=1");
		
//		String coreCustomerNum = getCommQueryServletRequest().getParameter("id");
		String coreCustomerNum = (String) getCommQueryServletRequest().getParameterMap().get("id");
		boolean flag;
		if(StringUtils.isNotBlank(coreCustomerNum)) {
			hql.append(" and po.coreCustomerNum='").append(coreCustomerNum).append("'");
		}
		else hql=new StringBuffer(" from TbCsmAccountsRelation po where 0=1");
		Iterator it = BaseDAOUtils.getHQLDAO().queryByQL(hql.toString());
		if(it.hasNext()){
			flag=false;
		}else flag=true;
		if(it.hasNext()){
			flag=false;
		}else if(StringUtils.isNotBlank(coreCustomerNum))
			{flag=false;}
			else flag=true;
		while (it.hasNext()) {
			TbCsmAccountsRelation obj =(TbCsmAccountsRelation) it.next();
			TreeNode n = this.convert(obj);
			list.add(n);
			flag=false;
		}
		//list = buildTree(list, rootBrcode);

		if(flag==true){
		TreeNode root = new TreeNode();
		root.setHasChild(true);
		root.setId("0");
		root.setText("账号列表");
		root.setPid("");
		list.add(root);
		flag=false;}
		ResultMng.fillResultByList(getCommonQueryBean(), getCommQueryServletRequest(), list, getResult());
		getResult().setContent(list);
		getResult().getPage().setTotalPage(1);
		getResult().init();
		return getResult();
	}

	private List<TreeNode> getNodes(TreeNode node) {
		List<TreeNode> t = new ArrayList<TreeNode>();
		t.add(node);
		for(TreeNode n : node.getChildren()) {
			t.addAll(getNodes(n));
		}
		return t;
	}

	private TreeNode convert(final TbCsmAccountsRelation obj) {
		TreeNode node = new TreeNode();
		node.setCanSelected(true);
		node.setId(StringUtils.strip(obj.getAccounts()));
		node.setText(obj.getAccounts());
		node.setHasChild(false);
		node.setPid("0");
		node.setIconCls("icon-search");
		return node;
	}

}
